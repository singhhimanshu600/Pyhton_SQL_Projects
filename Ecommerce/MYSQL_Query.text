CREATE DATABASE ECOMMERCE;
USE ECOMMERCE;
# 1. List all unique cities where customers are located.
select distinct(customer_city) from customers;

# 2. Count the number of orders placed in 2017.
select count(*) from orders where year(order_purchase_timestamp) = 2017;

# 3. Find the total sales per category.
select products.product_category as category, round(sum(payments.payment_value),2) as sales
from products join order_items on 
products.product_id=order_items.product_id
join payments on payments.order_id=order_items.order_id
group by category;

#4. Calculate the percentage of orders that were paid in installments.
select (sum(
case when payment_installments >=1 then 1 else 0 end ))/count(*)*100 as per_order from payments;

#5. Count the number of customers from each state. 
select customer_state,count(*)as number_of_customer from customers
group by customer_state;

# 6. Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp)as month,count(order_id)as order_count from orders
group by month;

#7. Find the average number of products per order, grouped by customer city.
with count_per_order as (select orders.order_id,orders.customer_id, count(order_items.order_id) as oc
from orders join order_items on
orders.order_id=order_items.order_id
group by orders.order_id,orders.customer_id)
select customers.customer_city,round(avg(count_per_order.oc),2) as avg_order_product
from customers join count_per_order on
customers.customer_id=count_per_order.customer_id
group by customers.customer_city;

#8. Calculate the percentage of total revenue contributed by each product category.
select products.product_category as category, round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) as sales
from products join order_items on 
products.product_id=order_items.product_id
join payments on payments.order_id=order_items.order_id
group by category
order by sales desc;

#9. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category,count(order_items.product_id)as number_of_order_placed,round(avg(order_items.price),2)as avg_price from products join
order_items on
products.product_id=order_items.product_id
group by products.product_category;

#10. Calculate the total revenue generated by each seller, and rank them by revenue.
select*,dense_rank() over (order by revenue desc)as Ranks from
(select order_items.seller_id,round(sum(payments.payment_value),2) as revenue from payments
 join  order_items on
 payments.order_id=order_items.order_id
 group by seller_id)as a;
 
 #11. Calculate the moving average of order values for each customer over their order history.Â¶
 select customer_id,order_purchase_timestamp,payment,avg(payment) over(partition by customer_id
 order by order_purchase_timestamp
 rows between 2 preceding and current row)as moving_avg from
 (select orders.customer_id,orders.order_purchase_timestamp, payments.payment_value as payment
 from payments join orders on
 payments.order_id=orders.order_id)as an;
 
 #12. Calculate the cumulative sales per month for each year.
 select years,months,payment,sum(payment)over(order by years,months)as cumulative_sales from
 (select year(orders.order_purchase_timestamp)as years,month(orders.order_purchase_timestamp) as months,
 round(sum(payments.payment_value),2) as payment from orders join payments on
 orders.order_id=payments.order_id
 group by years,months order by years,months) as n; 
 
 
 # 13. Calculate the year-over-year growth rate of total sales.
with a as (select year(orders.order_purchase_timestamp)as years,
 round(sum(payments.payment_value),2) as payment from orders join payments on
 orders.order_id=payments.order_id
 group by years order by years)
 select years,payment,
 round(((payment-lag(payment,1) over(order by years))/ lag(payment,1) over(order by years))*100,2) as yoy__growth
 from a;
 
 #14. """Calculate the retention rate of customers,
 #defined as the percentage of customers who make another purchase within 6 months of their first purchase."""
with a as(select customers.customer_id,min(orders.order_purchase_timestamp)as first_order from customers join orders on
customers.customer_id=orders.customer_id
group by customers.customer_id),
b as (select a.customer_id,count(distinct orders.order_purchase_timestamp)as next_order from a join orders on
 orders.customer_id=a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < date_add(first_order,interval 6 month)
group by a.customer_id)
select 100*(count(distinct a.customer_id)/count(distinct b.customer_id)) as retention_rate
from a left join b on
a.customer_id=b.customer_id;

# 15. Identify the top 3 customers who spent the most money in each year.
with ranked_customer as(select years,customer_id,payment,dense_rank() over(partition by years order by payment desc) as d_rank from
(select year(orders.order_purchase_timestamp)as years,orders.customer_id,
round(sum(payments.payment_value),2)as payment from orders join payments on
orders.order_id=payments.order_id
group by years,orders.customer_id) as a)
select*from ranked_customer where d_rank<=3;
